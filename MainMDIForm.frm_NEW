VERSION 5.00
Begin VB.MDIForm MainMDIForm 
   BackColor       =   &H00E0E0E0&
   Caption         =   "Viewer - Imaging101"
   ClientHeight    =   7905
   ClientLeft      =   1320
   ClientTop       =   750
   ClientWidth     =   9105
   Icon            =   "MainMDIForm.frx":0000
   LinkTopic       =   "MDIForm1"
   Begin VB.PictureBox PictureButtonBar 
      Align           =   1  'Align Top
      BackColor       =   &H00FEDCC7&
      BorderStyle     =   0  'None
      Height          =   975
      Left            =   0
      ScaleHeight     =   975
      ScaleWidth      =   9105
      TabIndex        =   1
      Top             =   0
      Width           =   9105
      Begin VB.CommandButton cmdEdit 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFFFF&
         Caption         =   "Edit"
         Height          =   250
         Left            =   6240
         Style           =   1  'Graphical
         TabIndex        =   24
         ToolTipText     =   "Launch to Associated Application"
         Top             =   720
         Visible         =   0   'False
         Width           =   855
      End
      Begin VB.CommandButton cmdPrint 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFFFF&
         Caption         =   "Print"
         Height          =   255
         Left            =   6240
         Style           =   1  'Graphical
         TabIndex        =   14
         ToolTipText     =   "Print"
         Top             =   480
         Width           =   855
      End
      Begin VB.CommandButton cmdSendTo 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFFFF&
         Caption         =   "SendTo"
         Height          =   255
         Left            =   6240
         Style           =   1  'Graphical
         TabIndex        =   19
         ToolTipText     =   "Send To (eMail)"
         Top             =   240
         Width           =   855
      End
      Begin VB.CommandButton cmdThumbNails 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFFFF&
         Caption         =   "Thumbnails"
         Height          =   255
         Left            =   3600
         Style           =   1  'Graphical
         TabIndex        =   7
         ToolTipText     =   "Thumbnails"
         Top             =   720
         Width           =   975
      End
      Begin VB.CommandButton cmdEnhance 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFFFF&
         Caption         =   "Enhance OFF"
         Height          =   255
         Left            =   4560
         Style           =   1  'Graphical
         TabIndex        =   4
         ToolTipText     =   "Enhance OFF"
         Top             =   720
         Width           =   1695
      End

      Begin VB.CommandButton Command1 
         BackColor       =   &H00FFFFFF&
         Caption         =   "Command1"
         Height          =   375
         Left            =   7800
         MaskColor       =   &H00FFFFFF&
         Style           =   1  'Graphical
         TabIndex        =   22
         Top             =   720
         Visible         =   0   'False
         Width           =   975
      End
      Begin VB.CommandButton cmdZoomFit 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFFFF&
         Caption         =   "Fit to Window"
         Height          =   735
         Left            =   600
         Picture         =   "MainMDIForm.frx":0CCA
         Style           =   1  'Graphical
         TabIndex        =   21
         ToolTipText     =   "Fit Image to Window"
         Top             =   0
         Width           =   735
      End
      Begin VB.CheckBox chkStayOnTop 
         BackColor       =   &H00FEDCC7&
         Caption         =   "StayOnTop"
         ForeColor       =   &H000000FF&
         Height          =   195
         Left            =   0
         TabIndex        =   20
         Top             =   720
         Width           =   1215
      End
      Begin VB.CommandButton cmdAnnotate 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFFFF&
         Caption         =   "Annotate"
         Height          =   735
         Left            =   3720
         Picture         =   "MainMDIForm.frx":1254
         Style           =   1  'Graphical
         TabIndex        =   18
         ToolTipText     =   "Annotate image"
         Top             =   0
         Width           =   855
      End
      Begin VB.CommandButton cmdLaunch 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFFFF&
         Caption         =   "Launch"
         Height          =   250
         Left            =   6240
         Style           =   1  'Graphical
         TabIndex        =   17
         ToolTipText     =   "Launch to Associated Application"
         Top             =   0
         Width           =   855
      End
      Begin VB.CommandButton cmdImageRotateLeft 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFFFF&
         Caption         =   "Rotate"
         Height          =   735
         Left            =   2520
         Picture         =   "MainMDIForm.frx":17DE
         Style           =   1  'Graphical
         TabIndex        =   16
         ToolTipText     =   "Rotate Left"
         Top             =   0
         Width           =   615
      End
      Begin VB.CommandButton cmdImageRotateRight 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFFFF&
         Caption         =   "Rotate"
         Height          =   735
         Left            =   3120
         Picture         =   "MainMDIForm.frx":1D68
         Style           =   1  'Graphical
         TabIndex        =   15
         ToolTipText     =   "Rotate Right"
         Top             =   0
         Width           =   615
      End
      Begin VB.CommandButton cmdZoomOut 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFFFF&
         Caption         =   "Zoom Out"
         Height          =   735
         Left            =   0
         Picture         =   "MainMDIForm.frx":22F2
         Style           =   1  'Graphical
         TabIndex        =   13
         ToolTipText     =   "Zoom Out"
         Top             =   0
         Width           =   615
      End
      Begin VB.CommandButton cmdZoomIn 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFFFF&
         Caption         =   "Zoom In"
         Height          =   735
         Left            =   1320
         Picture         =   "MainMDIForm.frx":287C
         Style           =   1  'Graphical
         TabIndex        =   12
         ToolTipText     =   "Zoom In"
         Top             =   0
         Width           =   615
      End
      Begin VB.CommandButton cmdGotoPage 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFFFF&
         Caption         =   "Go to Page"
         Enabled         =   0   'False
         Height          =   735
         Left            =   5160
         Style           =   1  'Graphical
         TabIndex        =   11
         ToolTipText     =   "Go to a Page by Number"
         Top             =   0
         Width           =   495
      End
      Begin VB.CommandButton cmdPrevPage 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFFFF&
         Caption         =   "Page"
         Enabled         =   0   'False
         Height          =   735
         Left            =   4560
         Picture         =   "MainMDIForm.frx":2E06
         Style           =   1  'Graphical
         TabIndex        =   10
         ToolTipText     =   "Previous Page"
         Top             =   0
         Width           =   615
      End
      Begin VB.CommandButton cmdGotoImage 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFFFF&
         Caption         =   "Goto Image"
         Height          =   250
         Left            =   7680
         Style           =   1  'Graphical
         TabIndex        =   9
         Top             =   240
         Visible         =   0   'False
         Width           =   975
      End
      Begin VB.CommandButton cmdPrevImage 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFFFF&
         Caption         =   "<- Image"
         Height          =   250
         Left            =   7680
         Style           =   1  'Graphical
         TabIndex        =   8
         Top             =   0
         Visible         =   0   'False
         Width           =   855
      End
      Begin VB.CommandButton cmdNextPage 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFFFF&
         Caption         =   "Page"
         Enabled         =   0   'False
         Height          =   735
         Left            =   5640
         Picture         =   "MainMDIForm.frx":3190
         Style           =   1  'Graphical
         TabIndex        =   6
         ToolTipText     =   "Next Page"
         Top             =   0
         Width           =   600
      End
      Begin VB.CommandButton cmdNextImage 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFFFF&
         Caption         =   "Image ->"
         Height          =   250
         Left            =   7680
         Style           =   1  'Graphical
         TabIndex        =   5
         Top             =   480
         Visible         =   0   'False
         Width           =   855
      End
      Begin VB.CommandButton cmdSaveZoom 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFFFF&
         Caption         =   "Save Zoom"
         Height          =   735
         Left            =   1920
         Picture         =   "MainMDIForm.frx":351A
         Style           =   1  'Graphical
         TabIndex        =   3
         ToolTipText     =   "Save Zoom"
         Top             =   0
         Width           =   615
      End
      Begin VB.CheckBox chkViewAnnotations 
         BackColor       =   &H00FEDCC7&
         Caption         =   "View Annotations"
         Height          =   255
         Left            =   1320
         TabIndex        =   2
         Top             =   720
         Value           =   1  'Checked
         Width           =   1575
      End
   End
   Begin VB.PictureBox Picture1 
      Align           =   1  'Align Top
      Height          =   0
      Left            =   0
      ScaleHeight     =   0
      ScaleWidth      =   9105
      TabIndex        =   0
      Top             =   975
      Width           =   9105
   End
   Begin VB.Menu mnuBatch 
      Caption         =   "&Batch"
      Begin VB.Menu mnuBatchReplaceCurrentPage 
         Caption         =   "Replace Current Page"
      End
      Begin VB.Menu mnuBatchInsertPagesBefore 
         Caption         =   "Insert Pages BEFORE Current Page"
      End
      Begin VB.Menu mnuBatchInsertPagesAfter 
         Caption         =   "Insert Pages AFTER Current Page"
      End
      Begin VB.Menu mnuBatchAppendPages 
         Caption         =   "Append Pages to Batch"
      End
      Begin VB.Menu mnuBatchDeletePage 
         Caption         =   "Delete Page from Batch"
      End
   End
   Begin VB.Menu mnuView 
      Caption         =   "&View"
      Begin VB.Menu mnuScaleToGray 
         Caption         =   "Scale to Gray"
         Checked         =   -1  'True
      End
   End
   Begin VB.Menu Window 
      Caption         =   "Window"
      Begin VB.Menu mnuWTileHorizontal 
         Caption         =   "Tile Horizontal"
      End
      Begin VB.Menu mnuWTileVertical 
         Caption         =   "Tile Vertical"
      End
      Begin VB.Menu mnuWCascade 
         Caption         =   "Cascade"
      End
      Begin VB.Menu mnuWArrange 
         Caption         =   "Arrange"
      End
   End
   Begin VB.Menu mnu_MarkupControl 
      Caption         =   "&Markup Control"
      Visible         =   0   'False
   End
   Begin VB.Menu Help 
      Caption         =   "&Help"
      Begin VB.Menu AboutDoc 
         Caption         =   "About Doc"
      End
      Begin VB.Menu AboutView 
         Caption         =   "About View"
      End
      Begin VB.Menu AboutMarkup 
         Caption         =   "About Markup"
      End
      Begin VB.Menu AboutImaging101 
         Caption         =   "About Imaging101"
      End
   End
End
Attribute VB_Name = "MainMDIForm"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
    Dim docContents As IDocContents
    Dim ActivePage As IActivePage
    ' frmViewForm is the equivalent of "MainMDIForm.ActiveForm"
    Dim frmViewForm As ChildForm1
    Dim txtFullPathName As String
    Dim boolPageRotated As Boolean
    Dim strScanMode As String
    
    Dim m_ImageCount As Long
    Dim m_PageCount As Long
    Dim m_ImageSkipCount As Long
    
    Dim dblHoldBatchPageOrder As Long
    
    Dim intLoop As Integer

    
    
    
Private Sub AboutDoc_Click()
    
    On Error Resume Next
    
    Me.ActiveForm.SpicerDoc1.AboutBox
    
End Sub

Private Sub AboutImaging101_Click()

    On Error Resume Next
    
    frmAbout.Show
    
End Sub

Private Sub AboutMarkup_Click()
    
    On Error Resume Next
    
    Me.ActiveForm.SpicerMarkup1.AboutBox
    
End Sub

Private Sub AboutView_Click()
    
    On Error Resume Next
    
    Me.ActiveForm.SpicerView1.AboutBox
    
End Sub

Private Sub chkStayOnTop_Click()

    If chkStayOnTop = vbChecked Then
        funcMakeTopMost MainMDIForm, True
    Else
        funcMakeTopMost MainMDIForm, False
    End If
    
End Sub

Private Sub chkViewAnnotations_Click()

    On Error Resume Next
    
    Call Me.ActiveForm.subAnnotationLayerShowHide

End Sub

Public Sub cmdAnnotate_Click()

    On Error GoTo ERROR_HANDLER
    
    If funcIsFormLoaded(frmAnnotate) Then
        Me.ActiveForm.subAnnotationLayerSaveCheck
        Unload frmAnnotate
        Exit Sub
    End If
    
    If UBound(arrDisplayedPagesRetrieve) + UBound(arrDisplayedPagesIndex) > 0 Then
    '    frmAnnotate.Top = MainMDIForm.Top
    '    frmAnnotate.Left = MainMDIForm.Left - frmAnnotate.width
        frmAnnotate.Show
        Me.ActiveForm.subAnnotationLayerCreate
    End If
    
Exit Sub

ERROR_HANDLER:
    MsgBox "cmdAnnotate_Click:  Error with Annotations... Document not available!"
    Unload frmAnnotate
    
End Sub

Public Sub mnu_Markup_Click()
   On Error GoTo ErrorOccurred
   
''   Call IUserTools_ActiveTool(19)
   Exit Sub
   
ErrorOccurred:
   Exit Sub
End Sub





Private Sub cmdEdit_Click()
    
    On Error Resume Next
    
    'Launch ORIGINAL page/document
    Me.ActiveForm.subLaunch "Edit"

    Exit Sub
    
cmdEdit_ERROR:
    MsgBox "ERROR: " & Err.Number & " - " & Err.Description & _
    vbCrLf & "Unable to Launch document for Edit."
    
End Sub

Public Sub cmdEnhance_Click()


    'Toggle ScaleToGray enhancement On/Off
    mnuScaleToGray_Click
    
    'Execute the cmdScaleToGray Sub in the Active MDI Child form
    MainMDIForm.ActiveForm.cmdScaleToGray
    
End Sub

Private Sub cmdGotoImage_Click()

    Me.ActiveForm.subGotoImage
    

End Sub

Public Sub cmdLaunch_Click()

    On Error Resume Next
    
    'Launch page/document
    Me.ActiveForm.subLaunch
    
End Sub

Private Sub Command1_Click()
    '***************************************************
    '*** SAVE ALL PAGES AS A MULTIPAGE TIFF
    Dim txtAttachmentFileName As String
    txtAttachmentFileName = InputBox("What would you like to call THIS document?" & vbCrLf & "Press [Cancel] or the [Esc] key to cancel the send.", "Attachment Name", "Imaging101 Document")
    
    'Check if the user Canceled or entered no filename
    If Trim(txtAttachmentFileName) = "" Then
'        GoTo SESSION_LOGOFF
    End If
'    txtAttachmentFileName = Environ("TEMP") & "\" & txtAttachmentFileName & ".TIF"
    txtAttachmentFileName = Environ("TEMP") & "\" & txtAttachmentFileName & ".PDF"
    
    '*** Rasterize the Pages before sending
'     Me.ActiveForm.subRasterizeBatchEX
'     Me.ActiveForm.subRasterizeBatch
    
    Dim docSave As IDocSave
    ' Set the object variable for the IDocSave interface to the Document Control object
    ' that was saved by the Rasterize sub
    Set docSave = Me.ActiveForm.SpicerDoc1.object
    
'    docSave.SaveAsDialog False
    
    ' Save the modified pages in the Spicer Document format
    If Me.ActiveForm.txtPageCount > 1 Then
'        docSave.Save 0, False, API_MPAGE_TIFF, txtAttachmentFileName, txtAttachmentFileName
        docSave.Save 0, False, 619, txtAttachmentFileName, txtAttachmentFileName
    Else
'        docSave.Save 0, False, API_FF_TIFFM, txtAttachmentFileName, txtAttachmentFileName
        docSave.Save 0, False, 101, txtAttachmentFileName, txtAttachmentFileName
    End If


    ' De-initialize the object variable
    Set docSave = Nothing
    '***************************************************

End Sub

Private Sub cmdNextImage_Click()

    Me.ActiveForm.subGetNextImage
    
End Sub

Private Sub cmdPrevImage_Click()

    Me.ActiveForm.subGetPrevImage

End Sub

Private Sub cmdPrint_Click()
On Error GoTo ErrorOccurred

   Dim PrintView As IPrintView
   Dim msgPrint As String
   Dim printChoice
   ' Set the object variable for the IPrintView interface to the View Control object
   Set PrintView = Me.ActiveForm.SpicerView1.object
   ' Ask what print command to use
''   msgPrint = "Do you want to use the Print dialog box? " + Chr(13) + _
              "Click Yes to use the Print dialog box. " + Chr(13) + _
              "Click No to use the PrintDocument method."

''   printChoice = MsgBox(msgPrint, vbYesNo + vbQuestion, "Print Choices")
''   If printChoice = vbYes Then
      PrintView.PrintDialog 'Display the Print dialog box
''   Else
      ' Print one copy of all pages of the document in the active window.
      ' Do not print a banner or a stamp on it.
''      PrintView.PrintDocument IN_PRINT_ALL_PAGES, 0, 0, 1, IN_PMODE_DOCUMENT, _
                           False, IN_ZOOM_SCALETOFIT, IN_ORIENT_BEST_FIT, _
                           False, False

''   End If
   'De-initialize the object variable
   Set PrintView = Nothing
   Exit Sub
   
ErrorOccurred:
''''   ErrorHandler
   MsgBox "Sorry an error has occured... Error #" & Err.Number & " - " & Err.Description
   Exit Sub

End Sub

Private Sub cmdSaveZoom_Click()
    
    On Error Resume Next
    
    Dim ScaleScrollRotation As IScaleScrollRotation
    Dim dScale As Double
    Dim X As Long
    Dim Y As Long
    ' Set the object variable for the IScaleScrollRotation interface to the View Control object
    Set ScaleScrollRotation = Me.ActiveForm.SpicerView1.object
    ' Find the scale factor and x,y coordinates for the active page
''''    ScaleScrollRotation.GetZoomFactor 0, dScale, x, y
    dScale = Me.ActiveForm.SpicerView1.ZoomFactorScale(0)
    X = Me.ActiveForm.SpicerView1.ZoomFactorX(0)
    Y = Me.ActiveForm.SpicerView1.ZoomFactorY(0)
    
    result = WritePrivateProfileString(RegAppname, "frmViewForm.SpicerView1.ZoomFactorScale", dScale, RegFileName)
    result = WritePrivateProfileString(RegAppname, "frmViewForm.SpicerView1.ZoomFactorX", X, RegFileName)
    result = WritePrivateProfileString(RegAppname, "frmViewForm.SpicerView1.ZoomFactorY", Y, RegFileName)
    
    ' De-initialize the IMiscellaneous object variable
    Set ScaleScrollRotation = Nothing
    
    
End Sub

Private Sub cmdSendTo_Click()

    Dim bolSendToSMTP As String
    
    On Error Resume Next
    
'    Me.ActiveForm.subSendTo
    bolSendToSMTP = funcGetFieldFromDB(RegImaging101ConnectionString, "I101Control", "ID = 1", "SendEmailViaSMTP")
    
    If bolSendToSMTP = True Then
        Me.ActiveForm.subSendToSMTP
    Else
        Me.ActiveForm.subSendToOutlook
    End If


End Sub

Private Sub cmdThumbNails_Click()
    
    Screen.MousePointer = vbHourglass
    
    On Error Resume Next
    If funcIsFormLoaded(frmThumb) = False Then
'        Me.Hide
        DoEvents
        frmThumb.Show
        DoEvents
        frmThumb.SpicerThumbnail1.BindToViewControl MainMDIForm.ActiveForm.SpicerView1.object
        frmThumb.SpicerThumbnail1.Visible = True

        Me.SetFocus
'        'Walk the images Backwards to end up on Page 1
'        For intIndex = 1 To CInt(Me.ActiveForm.StatusBar1.Panels(4).Text)
'            Me.cmdNextPage_Click
'            DoEvents
'        Next
'        Me.Show
    Else
        Unload frmThumb
    End If
    
    Screen.MousePointer = vbNormal

End Sub



Private Sub cmdZoomFit_Click()
    
    On Error Resume Next
    
    MainMDIForm.ActiveForm.cmdZoomFit_Click

End Sub



Private Sub MDIForm_Load()
    ' Get saved settings from the registry
    On Error Resume Next
    MainMDIForm.Top = VBGetPrivateProfileString(RegAppname, "MainMDIForm.Top", RegFileName)
    MainMDIForm.Left = VBGetPrivateProfileString(RegAppname, "MainMDIForm.Left", RegFileName)
    MainMDIForm.width = VBGetPrivateProfileString(RegAppname, "MainMDIForm.Width", RegFileName)
    MainMDIForm.Height = VBGetPrivateProfileString(RegAppname, "MainMDIForm.Height", RegFileName)
    On Error GoTo 0
    
    If gsecRightsSendMail = vbChecked Then
        cmdSendTo.Visible = True
    Else
        cmdSendTo.Visible = False
    End If
    
    If gsecRightsLaunchDoc = vbChecked Then
        cmdLaunch.Visible = True
    Else
        cmdLaunch.Visible = False
    End If
    
    If gsecRightsPrint = vbChecked Then
        cmdPrint.Visible = True
    Else
        cmdPrint.Visible = False
    End If
    
    If gsecRightsAnnotate = vbChecked Then
        cmdAnnotate.Visible = True
    Else
        cmdAnnotate.Visible = False
    End If
    
    If gsecRightsThumbnails = vbChecked Then
        cmdThumbNails.Visible = True
    Else
        cmdThumbNails.Visible = False
    End If
    
    '*** Initialize the Displayed Pages Array
    ReDim arrDisplayedPagesRetrieve(0)
    ReDim arrDisplayedPagesIndex(0)
'    ReDim gFormArrayRetrieve(0)
'    ReDim gFormArrayIndex(0)
    
''''    PictureButtonBar.Height = cmdPrevPage.Height + cmdPrevImage.Height + cmdZoomIn.Height + 10
    
End Sub


Private Sub MDIForm_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    
    'Do NOT allow this form to be unloaded while it's still loading.
    If funcIsFormLoaded(frmIndex) And (Not bolIndexFormLoadComplete) Then
        Cancel = True
        Exit Sub
    End If
    
    On Error Resume Next
'      If frmAnnotate.Visible = True Then frmAnnotate.Unload

    'Save Form settings to the registry
    If Me.Top > 0 And Me.Left > 0 Then
        result = WritePrivateProfileString(RegAppname, "MainMDIForm.Top", MainMDIForm.Top, RegFileName)
        result = WritePrivateProfileString(RegAppname, "MainMDIForm.Left", MainMDIForm.Left, RegFileName)
        result = WritePrivateProfileString(RegAppname, "MainMDIForm.Width", MainMDIForm.width, RegFileName)
        result = WritePrivateProfileString(RegAppname, "MainMDIForm.Height", MainMDIForm.Height, RegFileName)
    End If

    Unload frmThumb
    
    On Error GoTo 0

End Sub

Private Sub mnuBatchAppendPages_Click()


    On Error GoTo ERROR_HANDLER
    
    m_ImageCount = 0
    m_PageCount = 0
    m_ImageSkipCount = 0
    
    strScanMode = "Append Pages"

    subScanBatch "A"

    
    
Exit Sub

ERROR_HANDLER:
    'Only show error message if it is not a User CANCEL
    If Err.Number <> 0 And InStr(1, UCase(Err.Description), "CANCEL") = 0 Then
        MsgBox "Error: " & Err.Number & "  Description: " & Err.Description
    End If


End Sub
Private Sub subScanBatch(strScanModePrefix As String)

    PixEzImage1.ScanStateFlush

    PixEzImage1.ScanAllowLongNames = 1     ' Allow long names
    PixEzImage1.ScanInsertMode = 2         ' overwrite
    PixEzImage1.ImageFileSchemaDetect = 0  ' We are specifying a schema, so do not try to detect
    
    PixEzImage1.ScanUseSchema = 1
    PixEzImage1.ScanFileDir = Trim(frmIndex.txtBatchDirectory)  ' Set directory for images
    PixEzImage1.SavePrecedence = 0   ' 0 = Let Color Format setting determine file types
    PixEzImage1.ScanFileRoot = CStr(Format(frmIndex.txtBatchRECID, "0000000000")) & "-" & Format(Now(), "yymmddhhmmss") & "-A"   ' Set schema root. All files will begin with this
     
    ' Make sure the ScanFileSchema does not have more than nine (9) pound signs (#'s) otherwise
    '  we get spaces instead of zero's
    PixEzImage1.ScanFileSchema = "$####;" ' Set schema: root name plus two digits.
    
    PixEzImage1.ScanSelect
    PixEzImage1.ShowScannerSettingsDialog

    PixEzImage1.ScanFileExt = funcPixGetFileExt(PixEzImage1)
    

    PixEzImage1.ScanBatch


    'Re-populate the List of Pages
    Call frmIndex.subLoadPagesIntoListView
    'Set the list index to the same image we were on which should be the first one inserted
    frmIndex.ListView1.ListItems.item(dblHoldBatchPageOrder + 1).Selected = True

    'Re-display the image
    Call frmIndex.ListView1_Click

End Sub
Private Sub mnuBatchDeletePage_Click()

    On Error GoTo ERROR_HANDLER
    
    'Delete the currently selected page
    result = MsgBox("Are you Sure you wish to Delete the Selected Page? ", vbYesNo, "Delete Batch Page")
    If result = vbNo Then
        Exit Sub
    End If
    
    'Hold to Current Position in the List (Page number)
    dblHoldBatchPageOrder = frmIndex.ListView1.ListItems.item(frmIndex.ListView1.SelectedItem.Index).Text
    
    '*** DELETE the Page
    subDeleteBatchPageRecord
    
    'Re-populate the List of Pages
    Call frmIndex.subLoadPagesIntoListView
    
    If dblHoldBatchPageOrder > frmIndex.ListView1.ListItems.count Then
        'Set the list index to the last image on the list
        frmIndex.ListView1.ListItems.item(frmIndex.ListView1.ListItems.count).Selected = True
    Else
        'Set the list index to the same position on the list
        frmIndex.ListView1.ListItems.item(dblHoldBatchPageOrder).Selected = True
    End If

    'Re-display the image
    Call frmIndex.ListView1_Click

Exit Sub

ERROR_HANDLER:
    'Only show error message if it is not a User CANCEL
    If Err.Number <> 0 And InStr(1, UCase(Err.Description), "CANCEL") = 0 Then
        MsgBox "Error: " & Err.Number & "  Description: " & Err.Description
    End If


End Sub

Private Sub mnuBatchInsertPagesAfter_Click()

    On Error GoTo ERROR_HANDLER
    
    m_ImageCount = 0
    m_PageCount = 0
    m_ImageSkipCount = 0
    
    strScanMode = "Insert Pages AFTER"
    
    subScanBatch "IA"

    
    
Exit Sub

ERROR_HANDLER:
    'Only show error message if it is not a User CANCEL
    If Err.Number <> 0 And InStr(1, UCase(Err.Description), "CANCEL") = 0 Then
        MsgBox "Error: " & Err.Number & "  Description: " & Err.Description
    End If

End Sub

Private Sub mnuBatchInsertPagesBefore_Click()

    On Error GoTo ERROR_HANDLER
    
    m_ImageCount = 0
    m_PageCount = 0
    m_ImageSkipCount = 0
    
    strScanMode = "Insert Pages BEFORE"
    
    subScanBatch "IB"

    
Exit Sub

ERROR_HANDLER:
    'Only show error message if it is not a User CANCEL
    If Err.Number <> 0 And InStr(1, UCase(Err.Description), "CANCEL") = 0 Then
        MsgBox "Error: " & Err.Number & "  Description: " & Err.Description
    End If

End Sub

Private Sub mnuBatchReplaceCurrentPage_Click()

    On Error GoTo ERROR_HANDLER
    
    strScanMode = "Replace Page"
    
    PixEzImage1.ShowScannerSettingsDialog
    
    'Rename the original file in case the scan fails
    Name txtFullPathName As txtFullPathName & "_TMP"
    txtFullPathName = frmIndex.txtBatchDirectory & "\" & frmIndex.txtBatchPageFileName
    PixEzImage1.ScanFileName = txtFullPathName
    PixEzImage1.ScanSingle
    PixEzImage1.Close
    'Scan succeeded... zap Temp file
    Kill txtFullPathName & "_TMP"
    
    'Re-display the image
    Call frmIndex.ListView1_Click
    
Exit Sub

ERROR_HANDLER:
    'Only show error message if it is not a User CANCEL
    If Err.Number <> 0 And InStr(1, UCase(Err.Description), "CANCEL") = 0 Then
        MsgBox "Error: " & Err.Number & "  Description: " & Err.Description
        'Rename the Temp file back to the original name so Index doesn't freak out!
        Name txtFullPathName & "_TMP" As txtFullPathName
    
    End If
    
End Sub

Public Sub mnuScaleToGray_Click()

    On Error Resume Next
    
   If MainMDIForm.mnuScaleToGray.Checked Then
        MainMDIForm.mnuScaleToGray.Checked = vbUnchecked
        MainMDIForm.cmdEnhance.Caption = "Enhance ON"
   Else
        ' Toggle the menu item between checked and not checked
        MainMDIForm.mnuScaleToGray.Checked = vbChecked
        MainMDIForm.cmdEnhance.Caption = "Enhance OFF"
    End If

    'Execute the cmdScaleToGray Sub in the Active MDI Child form
    MainMDIForm.ActiveForm.cmdScaleToGray
    
End Sub

Public Sub mnuWCascade_Click()
   ' Cascade child forms.
   MainMDIForm.Arrange vbCascade
End Sub

Public Sub mnuWTileHorizontal_Click()
   ' Tile child forms (horizontal).
   MainMDIForm.Arrange vbTileHorizontal
End Sub

Public Sub mnuWTileVertical_Click()
   ' Tile child forms (horizontal).
   MainMDIForm.Arrange vbTileVertical
End Sub
Public Sub mnuWArrange_Click()
   ' Arrange all child form icons.
   MainMDIForm.Arrange vbArrangeIcons
End Sub


Public Sub cmdGotoPage_Click()
   
   
    On Error Resume Next
    
    'Check if Annotations were added and users wishes to Save them
    Me.ActiveForm.subAnnotationLayerSaveCheck
    
    Me.ActiveForm.SpicerView1.PageGotoDialog
   
    Me.ActiveForm.subSetCurrentPage
    
    subZoomToSavedFactor
      

End Sub

Public Sub cmdNextPage_Click()

    On Error Resume Next
    
    'Check if Annotations were added and users wishes to Save them
    Me.ActiveForm.subAnnotationLayerSaveCheck
    
'''    Me.ActiveForm.SpicerView1.GotoPageRelative 1
'''
'''    Me.ActiveForm.subSetCurrentPage
    
    '*** HAD TO TRICK THE LIST BOX TO CLEAR THE PREVIOUSLY SELECTED ITEM
    '*** commented the above code because  "lstPageList.Selected" triggers a "Click" event
    Me.ActiveForm.lstPageList.Selected(Me.ActiveForm.txtPageNumber - 1) = False
    Me.ActiveForm.lstPageList.Selected(Me.ActiveForm.txtPageNumber) = True
   
    subZoomToSavedFactor
   
End Sub

Public Sub cmdPrevPage_Click()

    On Error Resume Next
    
    'Check if Annotations were added and users wishes to Save them
    Me.ActiveForm.subAnnotationLayerSaveCheck
    
'''    Me.ActiveForm.SpicerView1.GotoPageRelative -1
'''
'''    Me.ActiveForm.subSetCurrentPage
    
    '*** HAD TO TRICK THE LIST BOX TO CLEAR THE PREVIOUSLY SELECTED ITEM
    '*** commented the above code because  "lstPageList.Selected" triggers a "Click" event
    Me.ActiveForm.lstPageList.Selected(Me.ActiveForm.txtPageNumber - 1) = False
    Me.ActiveForm.lstPageList.Selected(Me.ActiveForm.txtPageNumber - 2) = True
    
    
    subZoomToSavedFactor

End Sub

Public Sub cmdZoomIn_Click()

    On Error Resume Next
    
    'Execute the cmdZoomIn Sub in the Active MDI Child Form
    Me.ActiveForm.cmdZoomIn

End Sub

Public Sub cmdZoomOut_Click()

    On Error Resume Next
    
    'Execute the cmdZoomOut Sub in the Active MDI Child Form
    Me.ActiveForm.cmdZoomOut
    
End Sub



Function funcShowImage(strBatchDirectory As String, strBatchPageFileName As String, _
                        ByVal txtDocumentRECID As String, ByVal txtDetailRECID As String, _
                        ByVal txtCaption As String, ByVal txtTotalImages As Double, _
                        ByVal txtImageNumber As Double, ByVal txtPageRotation As Double, intI101Module As Integer)
        
        '*** NOTE:  Make sure to Check if File Exists PRIOR to calling this function
        
        On Error Resume Next
        
        Dim i As Integer
                
        Select Case intI101Module
            Case gI101ModuleRetrieve
                'Allow loading MULTIPLE documents in the viewer
                
                i = UBound(arrDisplayedPagesRetrieve)
                Debug.Print "UBound(arrDisplayedPagesRetrieve) = " & UBound(arrDisplayedPagesRetrieve)
                
                '*** If the Array is not empty Check if THIS DetailRECID item is already open
                If UBound(arrDisplayedPagesRetrieve) > 0 Then
                    For j = 0 To i
                        If arrDisplayedPagesRetrieve(j) = txtDetailRECID Then
                            'The item IS Already Loaded... Simply Set the Focus to it.
                            gFormArrayRetrieve(j).SetFocus
                            Exit Function
                        End If
                    Next
                End If
                
                txtFullPathName = strBatchDirectory & "\" & strBatchPageFileName
                
                'Create a NEW Child Form and increment the Array
                ReDim Preserve gFormArrayRetrieve(i + 1)
                Set frmViewForm = gFormArrayRetrieve(i)
    '            Set frmViewForm = New ChildForm1
    
                'Add THIS DetailRECID to the list of Displayed RECID's
                ReDim Preserve arrDisplayedPagesRetrieve(0 To i + 1)
                arrDisplayedPagesRetrieve(i) = txtDetailRECID
                
                Debug.Print "UBound(arrDisplayedPagesRetrieve) = " & UBound(arrDisplayedPagesRetrieve)
            
            Case gI101ModuleIndex
                
                
                txtFullPathName = strBatchDirectory & "\" & strBatchPageFileName
                
                'Set up the Child Form - Set i=1 to Allow SINGLE PAGES ONLY
                i = 1
                ReDim Preserve gFormArrayIndex(i)
                Set frmViewForm = gFormArrayIndex(i)
                Set gFormArrayIndex(i) = frmViewForm
                
                If UBound(gFormArrayIndex) > 0 Then
                    ' If there is an open document in the SpicerDoc1 Control
                    ' Close the document in the SpicerDoc1 control and
                    ' To check if the document has been changed, set CloseDocument to "True"
                    ' Allow loading only a SINGLE document
                    gFormArrayIndex(i).SpicerDoc1.CloseDocument False
                End If
            
                'Add THIS DetailRECID to the list of Displayed RECID's
                ReDim Preserve arrDisplayedPagesIndex(0 To i)
                arrDisplayedPagesIndex(i) = txtDetailRECID
                
                
           Case Else
                Exit Function
                
        End Select
        
        
        
        '*** Store the Array and DetailRECID to the New Viewform
        '    to allow removing from the arrDisplayedPages() Array when unloaded
        If txtCaption = "" Then
            frmViewForm.Caption = txtFullPathName
        Else
            frmViewForm.Caption = txtCaption
        End If
        
        frmViewForm.txtModuleIndex = intI101Module
        frmViewForm.txtArrayIndex = i
        frmViewForm.txtDetailRECID = txtDetailRECID
        frmViewForm.txtDocumentRECID = txtDocumentRECID
        frmViewForm.txtImageCount = txtTotalImages
        frmViewForm.txtImageNumber = txtImageNumber
        frmViewForm.txtPageNumber = 1
        frmViewForm.txtPageRotation = txtPageRotation
        frmViewForm.txtPageFileName = txtFullPathName
        
        Set docContents = frmViewForm.SpicerDoc1.object
        Set ActivePage = frmViewForm.SpicerView1.object
        
        'Set the View Control NOT Visible to prevent the Flash from Full view to zoomed.
        frmViewForm.SpicerView1.Visible = False
        
        
        
        '*********************************************************************
        '**** OPEN THE FILE
        '***
        
        'Bypass the Spicer Error if file cannot be opened
        frmViewForm.SpicerConfiguration1.BatchMessageMode = True
        
        
        docContents.OpenFile txtFullPathName

        
        bolObjectLaunched = False
        
        '*** IF ERROR OCCURED THEN LAUNCH THE FILE / OBJECT
        If Err.Number = 0 Then
        
            '*** Clear the Page List
            frmViewForm.lstPageList.Clear
            
            '*** Update the Page Arrays
    '        frmViewForm.subUpdatePageArrays 0, docContents.NumberOfPages
            
            
            
            
            ActivePage.BindToDocumentControl frmViewForm.SpicerDoc1.object
    '        frmThumb.SpicerThumbnail1.BindToViewControl frmViewForm.SpicerView1.object
    
           
    '        If MainMDIForm.mnuScaleToGray = True Then
    '    '        MainMDIForm.ActiveForm.SpicerView1.ScaleToGray(0) = IN_ON
    '            frmViewForm.SpicerView1.ScaleToGray(0) = IN_ON
    '            cmdEnhance.Caption = "Enhance OFF"
    '
    '        Else
    '    '        MainMDIForm.ActiveForm.SpicerView1.ScaleToGray(0) = IN_OFF
    '            frmViewForm.SpicerView1.ScaleToGray(0) = IN_OFF
    '            cmdEnhance.Caption = "Enhance ON"
    '        End If
            '8/2/2005 Jacob - Commented the above ScaleToGray to make the code more consistent
            Me.ActiveForm.cmdScaleToGray
                   
    '        frmViewForm.SetFocus
    '        frmViewForm.subSetCurrentPage
    '        frmViewForm.subRotateImage txtPageRotation
            
            ' Zoom to Saved factor
            subZoomToSavedFactor
            
           frmViewForm.SpicerView1.Visible = True
    ''        frmViewForm.SpicerView1.Refresh
    
        Else
            
            '*** LAUNCH THE OBJECT
            
            Debug.Print txtFullPathName
            txtLaunchFilePath = funcGetTempDir
            
            txtPageFileName = txtFullPathName
            
'            intPositionOfLastPeriod = InStrRev(txtLaunchFilePath, ".")
'            txtLaunchFileName = Left(txtLaunchFilePath, intPositionOfLastPeriod)
            
            intPositionOfLastPeriod = InStrRev(txtPageFileName, ".")
            txtLaunchFileExtension = Right(txtPageFileName, Len(txtPageFileName) - intPositionOfLastPeriod)
        
            txtLaunchFileName = txtLaunchFilePath & "I101LaunchFile." & txtLaunchFileExtension
            
            Debug.Print txtLaunchFileName
            
            'Copy the Stored Document to the Local TEMP Directory to launch
            FileCopy txtFullPathName, txtLaunchFileName
            
            'Launch the document
            Call shelldoc(txtLaunchFileName)

            frmViewForm.txtPageFileName = txtLaunchFileName
            bolObjectLaunched = True
            frmViewForm.txtChildFormMessage.Visible = True
            frmViewForm.txtChildFormMessage.Text = "OBJECT LAUNCHED!"
        
            MainMDIForm.ActiveForm.StatusBar1.Panels(1).Text = "Object Launched"
            MainMDIForm.ActiveForm.lblLoadingPages.Visible = False
        
        End If


        Set docContents = Nothing
        Set frmViewForm = Nothing
        

        
End Function


Public Sub cmdImageRotateLeft_Click()
    
    On Error Resume Next
    
    'ActiveForm is the "Active" instance of the ChildForm1
    MainMDIForm.ActiveForm.cmdImageRotateLeft
    
End Sub

Public Sub cmdImageRotateRight_Click()

    On Error Resume Next
    
    'ActiveForm is the "Active" instance of the ChildForm1
    MainMDIForm.ActiveForm.cmdImageRotateRight
    
End Sub

Public Sub subShowActiveLayer()

    Dim UserTools As IUserTools
    
    ' Set the object variable for the IUserTools interface to the Markup Control object
    Set UserTools = frmViewForm.SpicerMarkup1.object
    
    ' Open the Change Active Layer dialog box
    UserTools.ActiveLayerDialog
    
    ' De-initialize the object variable
    Set UserTools = Nothing
    
End Sub

Private Sub Toolbar1_ButtonClick(ByVal Button As ComctlLib.Button)

End Sub

Public Sub subZoomToSavedFactor()
    Dim ScaleScrollRotation As IScaleScrollRotation
    Dim dScale As Double
    Dim X As Long
    Dim Y As Long
    ' Set the object variable for the IScaleScrollRotation interface to the View Control object
    Set ScaleScrollRotation = Me.ActiveForm.SpicerView1.object
    ' Find the scale factor and x,y coordinates for the active page
''''    ScaleScrollRotation.GetZoomFactor 0, dScale, x, y
    On Error Resume Next
    dScale = VBGetPrivateProfileString(RegAppname, "frmViewForm.SpicerView1.ZoomFactorScale", RegFileName)
    X = VBGetPrivateProfileString(RegAppname, "frmViewForm.SpicerView1.ZoomFactorX", RegFileName)
    Y = VBGetPrivateProfileString(RegAppname, "frmViewForm.SpicerView1.ZoomFactorY", RegFileName)
    On Error GoTo 0
    
    ' ***  ZOOM FACTORS are NOT BEING SET -- SEEMS TO BE "CONSTANTS" ???
''    frmViewForm.SpicerView1.ZoomFactorX(0) = X
''    frmViewForm.SpicerView1.ZoomFactorY(0) = Y
''    frmViewForm.SpicerView1.ZoomFactorScale(0) = dScale
    
    ScaleScrollRotation.SetZoomFactor 0, IN_ZOOM_CUSTOM_CENTER, dScale, X, Y


    
    ' De-initialize the IMiscellaneous object variable
    Set ScaleScrollRotation = Nothing
    
End Sub

Public Sub subRemoveDisplayedPageFromArray(intI101Module As Integer, txtArrayIndex As String)

    '*** REMOVE the Array Element for an Unloaded Document
    Dim i As Integer
'    For j = 0 To UBound(arrDisplayedPages, intI101Module): Debug.Print j & " " & intI101Module & " " & arrDisplayedPages(j): Next
        Select Case intI101Module
            Case gI101ModuleRetrieve
                For i = 1 To UBound(arrDisplayedPagesRetrieve)
                    If i >= txtArrayIndex And i < UBound(arrDisplayedPagesRetrieve) Then
                        'Replace the value of the current array item with the value of the next one
                        arrDisplayedPagesRetrieve(i) = arrDisplayedPagesRetrieve(i + 1)
                    End If
                Next
                ReDim Preserve arrDisplayedPagesRetrieve(UBound(arrDisplayedPagesRetrieve) - 1)
                Debug.Print "UBound(arrDisplayedPagesRetrieve) = " & UBound(arrDisplayedPagesRetrieve)
            
            Case gI101ModuleIndex
                ReDim Preserve arrDisplayedPagesIndex(UBound(arrDisplayedPagesIndex) - 1)

            Case Else
            
        End Select

'    For j = 0 To UBound(gI101ModuleArrayUbound, arrDisplayedPages): Debug.Print j & " " & arrDisplayedPages(j): Next


End Sub





Private Sub PixEzImage1_AfterScanSave()

    Dim txtFullPathName As String
    
    
    
    
    Select Case strScanMode
    
        Case "Replace Page"
            'Logic handled in the mnuBatchReplaceCurrentPage_Click() sub
            '  because AfterScanSave is NOT fired on single page scan.
            
        Case "Insert Pages BEFORE"
            txtFullPathName = frmIndex.txtBatchDirectory & "\" & frmIndex.txtBatchPageFileName
            dblHoldBatchPageOrder = frmIndex.ListView1.ListItems.item(frmIndex.ListView1.SelectedItem.Index).Text
            subSavePage strScanMode, frmIndex.txtApplicationName, frmIndex.txtBatchDirectory, frmIndex.txtBatchRECID, dblHoldBatchPageOrder
            
        Case "Insert Pages AFTER"
            txtFullPathName = frmIndex.txtBatchDirectory & "\" & frmIndex.txtBatchPageFileName
            dblHoldBatchPageOrder = frmIndex.ListView1.ListItems.item(frmIndex.ListView1.SelectedItem.Index).Text
            subSavePage strScanMode, frmIndex.txtApplicationName, frmIndex.txtBatchDirectory, frmIndex.txtBatchRECID, dblHoldBatchPageOrder
            
        Case "Append Pages"
            txtFullPathName = frmIndex.txtBatchDirectory & "\" & frmIndex.txtBatchPageFileName
            dblHoldBatchPageOrder = frmIndex.ListView1.ListItems.count
            subSavePage strScanMode, frmIndex.txtApplicationName, frmIndex.txtBatchDirectory, frmIndex.txtBatchRECID, dblHoldBatchPageOrder
            
            
    End Select
    


End Sub






Private Sub subSavePage(ScanMode As String, strApplicationName As String, strBatchDirectory As String, dblBatchRECID As Double, dblBatchPageOrder As Long)

    On Error GoTo ERROR_HANDLER
    
    ' Send the image to the Viewer form and save to file if requested

    Dim strFilename As String
    Dim temp As Long
    
    m_ImageCount = m_ImageCount + 1
    m_PageCount = m_PageCount + 1
    m_ImageSkipCount = m_ImageSkipCount + 1
    
    
    ' Save Image if requested
''''    strFileName = Format(dblBatchRECID, "000000000") & "-" & _
''''                    Format(Now(), "yymmddhhmmss") & "-" & _
''''                    Format(m_ImageCount, "0000") & ".TIF"
                    
    strFilename = Right(PixEzImage1.PageFileName, Len(PixEzImage1.PageFileName) - InStrRev(PixEzImage1.PageFileName, "\"))

       
        
    DoEvents

    'Send Image to the Viewer
    If chkScanDisplayImages = vbChecked Then
        If m_PageCount = 1 Or m_ImageSkipCount = CDbl(txtScanImageSkipCount) Then
            Imaging101ScanViewer.AddImage strFullBatchDirectory & "\" & strFilename
            m_ImageSkipCount = 0
        End If
    End If
    
    DoEvents
    
    'Create the Batch Page Record - Pass the filename as a parameter
    subCreateBatchPageRecord strScanMode, strApplicationName, strFilename, dblBatchRECID, dblBatchPageOrder

Exit Sub

ERROR_HANDLER:

'    MsgBox "chkBatchAutoName ERROR: " & Err.Number & vbCrLf & Err.Description & vbCrLf & sErrMessage
''''''''''    GetError
    Resume Next
    
End Sub


Private Sub subCreateBatchPageRecord(strScanMode As String, strApplicationName As String, strFilename As String, dblBatchRECID As Double, dblBatchPageOrder As Long)
    
        
'''        Screen.MousePointer = vbHourglass
'''        txtPagesImported = 0
                
        On Error GoTo CREATE_BATCH_PAGE_RECORD_ERROR
        
        Dim connImaging101Batch As ADODB.Connection
        Dim rsImaging101Batch As ADODB.Recordset
        
        Set connImaging101Batch = New ADODB.Connection
        connImaging101Batch.ConnectionString = RegImaging101BatchListConnectionString
        connImaging101Batch.ConnectionTimeout = 30
        connImaging101Batch.mode = adModeReadWrite
        connImaging101Batch.Open
        connImaging101Batch.Execute "SET LOCK_TIMEOUT -1"
        
        
        'Position the cursor on the rowset
        txtActionBeforeError = "Open Batches Table"
        Set rsImaging101Batch = New ADODB.Recordset
        '*** Prepare Result Set
        With rsImaging101Batch
            .ActiveConnection = connImaging101Batch
            .CursorLocation = adUseServer
            .CursorType = adOpenKeyset
            .LockType = adLockOptimistic
        End With
        
        rsImaging101Batch.Source = "SELECT * " & _
                    " FROM I101Batches " & _
                    " WHERE BatchRECID = " & dblBatchRECID
        
        connImaging101Batch.Errors.Clear
        rsImaging101Batch.Open
        rsImaging101Batch.MoveFirst
        
        txtActionBeforeError = "Open Batch Page Table"
        Set rsImaging101BatchPage = New ADODB.Recordset
        rsImaging101BatchPage.Open strApplicationName & "_BatchPage", connImaging101Batch, adOpenDynamic, adLockOptimistic
        
        'User Transaction Tracking to make sure the Batch and BatchPage tables are updated together!
        connImaging101Batch.BeginTrans
        
        '*** Adjust the QC values
        Select Case strScanMode
        
            Case "Insert Pages BEFORE"
            
                Set cmd = New ADODB.Command
                Set cmd.ActiveConnection = connImaging101Batch
                'Increment the page numbers of all Pages after the newly scanned one
                cmd.CommandText = "Update " & strApplicationName & "_BatchPage " & _
                                    " SET BatchPageOrder = BatchPageOrder + 1 " & _
                                    " WHERE BatchPageOrder >= " & dblBatchPageOrder - 1 + m_ImageCount
                cmd.Execute , , adCmdText

                
            Case "Insert Pages AFTER"
            
                Set cmd = New ADODB.Command
                Set cmd.ActiveConnection = connImaging101Batch
                cmd.CommandText = "Update " & strApplicationName & "_BatchPage " & _
                                    " SET BatchPageOrder = BatchPageOrder + 1 " & _
                                    " WHERE BatchPageOrder >= " & dblBatchPageOrder + m_ImageCount
                cmd.Execute , , adCmdText

            
            Case "Append Pages"
                'No Page REnumbering required
                
        End Select
        
        
        txtActionBeforeError = "Add New Record"
        rsImaging101BatchPage.AddNew
        
        txtActionBeforeError = "Assign Variables to Batch Page Fields"
        rsImaging101BatchPage("BatchPageRECID") = funcGetNextControlNumber(RegImaging101BatchListConnectionString, "I101Control", "BatchPageRECID")
        rsImaging101BatchPage("BatchRECID") = dblBatchRECID
        rsImaging101BatchPage("BatchPageFileName") = strFilename
        
        rsImaging101BatchPage("BatchPageIndexed") = ""
        rsImaging101BatchPage("BatchPageIsSeparator") = ""
        rsImaging101BatchPage("BatchPageNote") = ""
        rsImaging101BatchPage("BatchDocDesc") = ""
        rsImaging101BatchPage("BatchPageStatus") = ""
'        rsImaging101BatchPage("BatchPageCommitDate") = ""
        rsImaging101BatchPage("BatchPageCommitUser") = ""
        
        ' Set BATCHES field values
        txtActionBeforeError = "Assign Variables to Batch Fields"
        
        Dim intBatchPagesTotal As Integer
        intBatchPagesTotal = rsImaging101Batch("BatchPagesTotal")
        intBatchPagesTotal = intBatchPagesTotal + 1
        
        rsImaging101Batch("BatchPagesTotal") = intBatchPagesTotal
        
        '*** Adjust the QC values
        Select Case strScanMode
        
            Case "Insert Pages BEFORE"
                rsImaging101BatchPage("BatchPageOrder") = dblBatchPageOrder - 1 + m_ImageCount
                rsImaging101Batch("BatchPagesQCInserted") = rsImaging101Batch("BatchPagesQCInserted") + 1
                
            Case "Insert Pages AFTER"
                rsImaging101BatchPage("BatchPageOrder") = dblBatchPageOrder + m_ImageCount
                rsImaging101Batch("BatchPagesQCInserted") = rsImaging101Batch("BatchPagesQCInserted") + 1
            
            Case "Append Pages"
                rsImaging101BatchPage("BatchPageOrder") = dblBatchPageOrder + m_ImageCount
                rsImaging101Batch("BatchPagesQCAppended") = rsImaging101Batch("BatchPagesQCAppended") + 1
                
        End Select
        
        
        rsImaging101Batch("BatchPagesNotCommitted") = rsImaging101Batch("BatchPagesNotCommitted") + 1
        
        '*** UPDATE TABLES
        txtActionBeforeError = "Update Batch Page Values"
        rsImaging101BatchPage.Update
        
        txtActionBeforeError = "Update Batch Values"
        rsImaging101Batch.Update
    

    ' Commit the successful transactions
    txtActionBeforeError = "COMMIT BATCH PAGE TRANSACTION"
    connImaging101Batch.CommitTrans
    
    rsImaging101Batch.Close
    Set rsImaging101Batch = Nothing
    rsImaging101BatchPage.Close
    Set rsImaging101BatchPage = Nothing
'    Set connImaging101Batch = Nothing

    Screen.MousePointer = vbDefault

Exit Sub
    
CREATE_BATCH_PAGE_RECORD_ERROR:
        funcQuickMessage "SHOW", "CREATE_BATCH_PAGE_RECORD_ERROR: " & Err.Number & " - " & Err.Description & "  DURING ACTION: (" & txtActionBeforeError & ") - [Transaction Rolled Back - Batch Page NOT Created]"
        
        On Error Resume Next
        connImaging101Batch.RollbackTrans
        
        rsImaging101Batch.Close
        Set rsImaging101Batch = Nothing
        rsImaging101BatchPage.Close
        Set rsImaging101BatchPage = Nothing
'        Set connImaging101Batch = Nothing
        
        Screen.MousePointer = vbDefault

        bolCancelPendingXfers = True

    
End Sub


Function funcKillFileIfSmallerThan(FullFilePath As String, FileMinimumSize As Long) As Boolean
    
    Dim lngFileSize As Long
    lngFileSize = FileLen(FullFilePath)
    
    funcKillFileIfSmallerThan = False
    
    If lngFileSize < FileMinimumSize Then
'        MsgBox FullFilePath & " Size: " & lngFileSize & " Min: " & FileMinimumSize
        Kill FullFilePath
    
        'Set to true to notify the calling routing that the image WAS deleted
        funcKillFileIfSmallerThan = True

    End If
    
End Function


Private Sub subDeleteBatchPageRecord()
    
        
'''        Screen.MousePointer = vbHourglass
'''        txtPagesImported = 0
                
        On Error GoTo CREATE_BATCH_PAGE_RECORD_ERROR
        
        Dim connImaging101Batch As ADODB.Connection
        Dim rsImaging101Batch As ADODB.Recordset
        
        Set connImaging101Batch = New ADODB.Connection
        connImaging101Batch.ConnectionString = RegImaging101BatchListConnectionString
        connImaging101Batch.ConnectionTimeout = 30
        connImaging101Batch.mode = adModeReadWrite
        connImaging101Batch.Open
        connImaging101Batch.Execute "SET LOCK_TIMEOUT -1"
        
        
        'Position the cursor on the rowset
        txtActionBeforeError = "Open Batches Table"
        Set rsImaging101Batch = New ADODB.Recordset
        '*** Prepare Result Set
        With rsImaging101Batch
            .ActiveConnection = connImaging101Batch
            .CursorLocation = adUseServer
            .CursorType = adOpenKeyset
            .LockType = adLockOptimistic
        End With
        
        rsImaging101Batch.Source = "SELECT * " & _
                    " FROM I101Batches " & _
                    " WHERE BatchRECID = " & frmIndex.txtBatchRECID
        
        connImaging101Batch.Errors.Clear
        rsImaging101Batch.Open
        rsImaging101Batch.MoveFirst
        
        txtActionBeforeError = "Open Batch Page Table"
        Set rsImaging101BatchPage = New ADODB.Recordset
        rsImaging101BatchPage.Open frmIndex.txtApplicationName & "_BatchPage", connImaging101Batch, adOpenDynamic, adLockOptimistic
        
        'User Transaction Tracking to make sure the Batch and BatchPage tables are updated together!
        connImaging101Batch.BeginTrans
        
        '*** Adjust the QC values
                Set cmd = New ADODB.Command
                Set cmd.ActiveConnection = connImaging101Batch
                
                
                'DELETE THE SELECTED PAGE
                cmd.CommandText = "DELETE FROM " & frmIndex.txtApplicationName & "_BatchPage " & _
                                    " WHERE BatchPageRECID = " & frmIndex.txtBatchPageRECID
                cmd.Execute , , adCmdText

                
                'DECREMENT the page numbers of all Pages after the one to be deleted
                cmd.CommandText = "Update " & frmIndex.txtApplicationName & "_BatchPage " & _
                                    " SET BatchPageOrder = BatchPageOrder - 1 " & _
                                    " WHERE BatchPageOrder >= " & frmIndex.ListView1.SelectedItem.Index
                cmd.Execute , , adCmdText

                
        ' Set BATCHES field values
        txtActionBeforeError = "Assign Variables to Batch Fields"
        
        Dim intBatchPagesTotal As Integer
        intBatchPagesTotal = rsImaging101Batch("BatchPagesTotal")
        intBatchPagesTotal = intBatchPagesTotal - 1
        
        rsImaging101Batch("BatchPagesTotal") = intBatchPagesTotal
        
        rsImaging101Batch("BatchPagesQCDeleted") = rsImaging101Batch("BatchPagesQCDeleted") + 1
        
        rsImaging101Batch("BatchPagesNotCommitted") = rsImaging101Batch("BatchPagesNotCommitted") - 1
        
        txtActionBeforeError = "Update Batch Values"
        rsImaging101Batch.Update
        
    
        '*** KILL the IMAGE FILE
        Kill frmIndex.txtBatchDirectory & "\" & frmIndex.txtBatchPageFileName



    ' Commit the successful transactions
    txtActionBeforeError = "COMMIT BATCH PAGE TRANSACTION"
    connImaging101Batch.CommitTrans
    
    rsImaging101Batch.Close
    Set rsImaging101Batch = Nothing
    rsImaging101BatchPage.Close
    Set rsImaging101BatchPage = Nothing
'    Set connImaging101Batch = Nothing

    Screen.MousePointer = vbDefault

Exit Sub
    
CREATE_BATCH_PAGE_RECORD_ERROR:
        funcQuickMessage "SHOW", "DELETE_BATCH_PAGE_RECORD_ERROR: " & Err.Number & " - " & Err.Description & "  DURING ACTION: (" & txtActionBeforeError & ") - [Transaction Rolled Back - Batch Page NOT Created]"
        
        On Error Resume Next
        connImaging101Batch.RollbackTrans
        
        rsImaging101Batch.Close
        Set rsImaging101Batch = Nothing
        rsImaging101BatchPage.Close
        Set rsImaging101BatchPage = Nothing
'        Set connImaging101Batch = Nothing
        
        Screen.MousePointer = vbDefault

        bolCancelPendingXfers = True

    
End Sub
